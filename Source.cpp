#include "ktl2.h"
//=====================================================================================
void initarray(int**& b, int& m)
{
	b = new int* [m * sizeof(int)];
	for (int i = 0; i < m; i++)
	{
		*(b + i) = new int[m * sizeof(int)];
	}
}
//=====================================================================================
void Nhapsonguyen(int& n)
{
	scanf("%d", &n);
}
//=====================================================================================
void taomang(int**& b, int m)
{
	initarray(b, m);
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < m; j++)
		{
			printf("a[%d][%d]= ", i, j);
			Nhapsonguyen(b[i][j]);
		}
	}
}
//=====================================================================================
void xuatmang(int** b, int m)
{
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < m; j++)
		{
			printf("%5d", b[i][j]);
		}
		printf("%\n");
	}
}
//=====================================================================================
void taosongaunhien(int& n)
{

	int tam = rand() % 101 - 50;
	n = tam;
}
//=====================================================================================
void swap(int& a, int& b)
{
	int tam;
	tam = a;
	a = b;
	b = tam;
}
//=====================================================================================
void taomangngaunhien(int**& b, int m)
{
	srand((unsigned)time(NULL));
	initarray(b, m);
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < m; j++)
		{
			int tam = rand() % 101 - 50;
			b[i][j] = tam;
		}
	}
}
//=====================================================================================
void sapxepcotcgiamdan(int**& b, int m)
{
	int c;
	printf("Mang truoc khi sap xep la: \n");
	xuatmang(b,m);
	printf("Nhap cot c can sap xep: ");
	Nhapsonguyen(c);
	for (int i = 0; i < m - 1; i++)
	{
		for (int j = i + 1; j < m; j++)
		{
			if (b[i][c] < b[j][c])
			{
				swap(b[i][c], b[j][c]);
			}
		}
	}
}
//=====================================================================================
bool kiemtrachan(int a)
{
	if (a % 2 == 0)
		return true;
	return false;
}
//=====================================================================================
int tongtamgiactren(int** b, int m)
{
	int tong = 0;
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (i == j || i < j)
			{
				if (kiemtrachan(b[i][j]))
					tong += b[i][j];
			}
		}
	}
	return tong;
}
//=====================================================================================
float Cau31dequy(int x, int n)
{
	if (n == 1)
		return x;
	int tam = 0;
	for (int i = 1; i <= n; i++)
	{
		tam += i;
	}
	return (pow(x, n) / (float)tam) + Cau31dequy(x, n - 1);
}
//=====================================================================================
float Cau31khudequy(int x, int n)
{
	float tong = 0.0;

	for (int i = 1; i <= n; i++)
	{
		float tam = 0.0;
		for (int j = 1; j <= i; j++)
		{
			tam += j;
		}

		if (tam != 0)
			tong += (pow(x, i) / tam);
	}
	return tong;
}
//=====================================================================================
int tongcacchusodequy(int n)
{
	if (n < 10)
		return n;
	return n % 10 + tongcacchusodequy(n / 10);

}
//=====================================================================================
int tongcacchusokhudequy(int n)
{
	int tong = 0;
	do
	{
		tong += n % 10;
		n = n / 10;
	} while (n > 10);
	return tong + n;
}
//=====================================================================================
int Cau33(int n)
{
	if (n == 1)
		return 1;
	int kq = 0;
	for (int i = 1; i < n; i++)
	{
		kq += Cau33(n - i);
	}
	return n * kq;
}
//=====================================================================================

//=====================================================================================

//=====================================================================================

//=====================================================================================

//=====================================================================================

//=====================================================================================

//=====================================================================================

//=====================================================================================

//=====================================================================================

//=====================================================================================
